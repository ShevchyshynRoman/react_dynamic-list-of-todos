{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["Status","TodoList","todos","onSelectUserId","selectedUserId","useState","query","setQuery","todosStatus","setTodosStatus","isRandomized","setIsRandomized","preparingTodos","filteredByTitle","filter","todo","title","toLowerCase","includes","Completed","completed","Active","visibleTodos","arr","arrToShuffle","i","length","j","Math","floor","random","randomize","className","type","value","onChange","e","target","All","onClick","prev","map","classNames","checked","readOnly","userId","id","BASE_URL","getTodos","a","fetch","response","json","getUser","CurrentUser","setSelectedUserId","user","setUser","errorMessage","setErrorMessage","useEffect","userFromServer","name","email","phone","App","setTodos","todosFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.64768559.chunk.js","sourcesContent":["import React, { ChangeEvent, useState } from 'react';\nimport classNames from 'classnames';\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[],\n  onSelectUserId: (userId: number) => void,\n  selectedUserId: number,\n};\n\nenum Status {\n  All = 'all',\n  Completed = 'completed',\n  Active = 'active',\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  onSelectUserId,\n  selectedUserId,\n}) => {\n  const [query, setQuery] = useState('');\n  const [todosStatus, setTodosStatus] = useState('');\n  const [isRandomized, setIsRandomized] = useState(false);\n\n  const onFilterByTitleHandleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setQuery(e.target.value);\n  };\n\n  const onTodoSelectHandleChange = (e: ChangeEvent<HTMLSelectElement>) => {\n    setTodosStatus(e.target.value);\n  };\n\n  const onRandomizeButtonClick = () => {\n    setIsRandomized(prev => !prev);\n  };\n\n  const filterByTitle = () => {\n    return todos.filter(todo => (\n      todo.title.toLowerCase().includes(query.toLowerCase())\n    ));\n  };\n\n  const preparingTodos = () => {\n    const filteredByTitle = filterByTitle();\n\n    switch (todosStatus) {\n      case Status.Completed: {\n        return filteredByTitle.filter(todo => todo.completed);\n      }\n\n      case Status.Active: {\n        return filteredByTitle.filter(todo => !todo.completed);\n      }\n\n      default:\n        return filteredByTitle;\n    }\n  };\n\n  const randomize = (arr: Todo[]) => {\n    const arrToShuffle = [...arr];\n\n    for (let i = arrToShuffle.length - 1; i > 0; i -= 1) {\n      const j = Math.floor(Math.random() * (i + 1));\n\n      [arrToShuffle[i], arrToShuffle[j]] = [arrToShuffle[j], arrToShuffle[i]];\n    }\n\n    return arrToShuffle;\n  };\n\n  const visibleTodos = isRandomized\n    ? randomize(preparingTodos())\n    : preparingTodos();\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__list-container\">\n\n        <label>\n          {'Filter by title: '}\n          <input\n            data-cy=\"filterByTitle\"\n            type=\"text\"\n            value={query}\n            onChange={onFilterByTitleHandleChange}\n          />\n        </label>\n\n        <select\n          className=\"TodoList__select\"\n          onChange={onTodoSelectHandleChange}\n        >\n          <option value={Status.All}>\n            All\n          </option>\n          <option value={Status.Active}>\n            Active\n          </option>\n          <option value={Status.Completed}>\n            Completed\n          </option>\n        </select>\n\n        <button\n          className=\"button button--randomize\"\n          type=\"button\"\n          onClick={onRandomizeButtonClick}\n        >\n          Randomize\n        </button>\n\n        <ul\n          className=\"TodoList__list\"\n          data-cy=\"listOfTodos\"\n        >\n          {visibleTodos.map(todo => (\n            <li\n              key={todo.id}\n              className={classNames(\n                'TodoList__item',\n                { 'TodoList__item--checked': todo.completed },\n                { 'TodoList__item--unchecked': !todo.completed },\n              )}\n            >\n              <label>\n                <input type=\"checkbox\" checked readOnly />\n                <p>{todo.title}</p>\n              </label>\n\n              {todo.userId && (\n                <button\n                  data-cy=\"userButton\"\n                  className={classNames('TodoList__user-button button', {\n                    'TodoList__user-button--selected':\n                      todo.userId === selectedUserId,\n                  })}\n                  type=\"button\"\n                  onClick={() => onSelectUserId(todo.userId)}\n                >\n                  {`User ${todo.userId}`}\n                </button>\n              )}\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\nexport async function getTodos(): Promise<Todo[]> {\n  const response = await fetch(`${BASE_URL}/todos`);\n\n  return response.json();\n}\n\nexport async function getUser(userId: number): Promise<User> {\n  const response = await fetch(`${BASE_URL}/users/${userId}`);\n\n  return response.json();\n}\n","import React, { useEffect, useState } from 'react';\nimport './CurrentUser.scss';\n\nimport { getUser } from '../../api/api';\n\ntype Props = {\n  userId: number,\n  setSelectedUserId: (userId: number) => void,\n};\n\nexport const CurrentUser: React.FC<Props> = ({\n  userId,\n  setSelectedUserId,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  useEffect(() => {\n    async function response() {\n      try {\n        const userFromServer = await getUser(userId);\n\n        setUser(userFromServer);\n      } catch {\n        setErrorMessage('Cant load user from server');\n      }\n    }\n\n    response();\n  }, [userId]);\n\n  return (\n    <>\n      {user ? (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              {`Selected user: ${user?.id}`}\n            </span>\n          </h2>\n\n          <h3\n            data-cy=\"userName\"\n            className=\"CurrentUser__name\"\n          >\n            {user?.name}\n          </h3>\n\n          <p className=\"CurrentUser__email\">\n            {user?.email}\n          </p>\n\n          <p className=\"CurrentUser__phone\">\n            {user?.phone}\n          </p>\n\n          <button\n            type=\"button\"\n            className=\"button CurrentUser__clear\"\n            onClick={() => setSelectedUserId(0)}\n          >\n            Clear User\n          </button>\n        </div>\n      ) : (\n        <p>{errorMessage}</p>\n      )}\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  useEffect(() => {\n    async function response() {\n      try {\n        const todosFromServer = await getTodos();\n\n        setTodos(todosFromServer);\n      } catch {\n        setErrorMessage('Cant load todos from server');\n      }\n    }\n\n    response();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      {!errorMessage ? (\n        <div className=\"App__sidebar\">\n          {todos ? (\n            <TodoList\n              todos={todos}\n              selectedUserId={selectedUserId}\n              onSelectUserId={setSelectedUserId}\n            />\n          ) : (\n            <p>Loading...</p>\n          )}\n        </div>\n      ) : (\n        <p>{errorMessage}</p>\n      )}\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              setSelectedUserId={setSelectedUserId}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}