{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["Status","TodoList","todos","onSelectUserId","selectedUserId","useState","query","setQuery","todosStatus","setTodosStatus","visibleTodos","filteredByTitle","filter","todo","title","toLowerCase","includes","Completed","completed","Active","preparingTodos","className","type","value","onChange","event","target","All","map","classNames","checked","readOnly","userId","onClick","id","BASE_URL","a","fetch","response","json","CurrentUser","clearUser","user","setUser","useEffect","getUser","then","data","name","email","phone","App","setSelectedUserId","setTodos","getTodos","ReactDOM","render","document","getElementById"],"mappings":"+OAUKA,E,qFAAAA,K,UAAAA,E,sBAAAA,E,iBAAAA,M,KAME,IAAMC,EAA4B,SAAC,GAInC,IAHLC,EAGI,EAHJA,MACAC,EAEI,EAFJA,eACAC,EACI,EADJA,eAEA,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAsCF,mBAAS,IAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KAsBMC,EAdiB,WACrB,IAAMC,EANCT,EAAMU,QAAO,SAAAC,GAAI,OACtBA,EAAKC,MAAMC,cAAcC,SAASV,EAAMS,kBAO1C,OAAIP,IAAgBR,EAAOiB,UAClBN,EAAgBC,QAAO,SAAAC,GAAI,OAAIA,EAAKK,aAGzCV,IAAgBR,EAAOmB,OAClBR,EAAgBC,QAAO,SAAAC,GAAI,OAAKA,EAAKK,aAGvCP,EAGYS,GAErB,OACE,sBAAKC,UAAU,WAAf,UACE,wCAEA,sBAAKA,UAAU,2BAAf,UAEE,qDAEG,IACD,uBACE,UAAQ,gBACRC,KAAK,OACLC,MAAOjB,EACPkB,SAAW,SAAAC,GAAK,OAAIlB,EAASkB,EAAMC,OAAOH,aAI9C,yBACEF,UAAU,mBACVG,SAAU,SAACC,GACThB,EAAegB,EAAMC,OAAOH,QAHhC,UAME,wBAAQA,MAAOvB,EAAO2B,IAAtB,iBAGA,wBAAQJ,MAAOvB,EAAOmB,OAAtB,oBAGA,wBAAQI,MAAOvB,EAAOiB,UAAtB,0BAKF,oBACEI,UAAU,iBACV,UAAQ,cAFV,SAIGX,EAAakB,KAAI,SAAAf,GAAI,OACpB,qBAEEQ,UAAWQ,IACT,iBACA,CAAE,0BAA2BhB,EAAKK,WAClC,CAAE,6BAA8BL,EAAKK,YALzC,UAQE,kCACE,uBAAOI,KAAK,WAAWQ,SAAO,EAACC,UAAQ,IACvC,4BAAIlB,EAAKC,WAGVD,EAAKmB,QACJ,wBACE,UAAQ,aACRX,UAAWQ,IAAW,+BAAgC,CACpD,kCACEhB,EAAKmB,SAAW5B,IAEpBkB,KAAK,SACLW,QAAS,kBAAM9B,EAAeU,EAAKmB,SAPrC,wBASWnB,EAAKmB,YAtBbnB,EAAKqB,gB,+BCtFlBC,EAAW,oC,4CAEV,4BAAAC,EAAA,sEACkBC,MAAM,GAAD,OAAIF,EAAJ,WADvB,cACCG,EADD,yBAGEA,EAASC,QAHX,4C,kEAMA,WAAuBP,GAAvB,eAAAI,EAAA,sEACkBC,MAAM,GAAD,OAAIF,EAAJ,kBAAsBH,IAD7C,cACCM,EADD,yBAGEA,EAASC,QAHX,4C,sBCEA,IAAMC,EAA+B,SAAC,GAGtC,IAFLR,EAEI,EAFJA,OACAS,EACI,EADJA,UAEA,EAAwBpC,mBAAsB,MAA9C,mBAAOqC,EAAP,KAAaC,EAAb,KAOA,OALAC,qBAAU,YDRL,SAAP,mCCSIC,CAAQb,GACLc,MAAK,SAAAC,GAAI,OAAIJ,EAAQI,QACvB,CAACf,IAGF,sBAAKX,UAAU,cAAf,UACE,oBAAIA,UAAU,qBAAd,SACE,kDAEG,IAFH,OAGGqB,QAHH,IAGGA,OAHH,EAGGA,EAAMR,QAIX,oBACE,UAAQ,WACRb,UAAU,oBAFZ,gBAIGqB,QAJH,IAIGA,OAJH,EAIGA,EAAMM,OAGT,mBAAG3B,UAAU,qBAAb,gBACGqB,QADH,IACGA,OADH,EACGA,EAAMO,QAGT,mBAAG5B,UAAU,qBAAb,gBACGqB,QADH,IACGA,OADH,EACGA,EAAMQ,QAGT,wBACE5B,KAAK,SACLD,UAAU,4BACVY,QAAS,kBAAMQ,EAAU,IAH3B,4BCDSU,EArCO,WACpB,MAA4C9C,mBAAS,GAArD,mBAAOD,EAAP,KAAuBgD,EAAvB,KACA,EAA0B/C,mBAAiB,IAA3C,mBAAOH,EAAP,KAAcmD,EAAd,KAOA,OALAT,qBAAU,YFVL,WAAP,gCEWIU,GACGR,MAAK,SAAAC,GAAI,OAAIM,EAASN,SAIzB,sBAAK1B,UAAU,MAAf,UACE,qBAAKA,UAAU,eAAf,SACGnB,EACC,cAAC,EAAD,CACEA,MAAOA,EACPE,eAAgBA,EAChBD,eAAgBiD,IAGlB,6CAIJ,qBAAK/B,UAAU,eAAf,SACE,qBAAKA,UAAU,yBAAf,SACGjB,EACC,cAAC,EAAD,CACE4B,OAAQ5B,EACRqC,UAAWW,IAEX,2BCnCdG,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.4aa45eb1.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[],\n  onSelectUserId: (userId: number) => void,\n  selectedUserId: number,\n};\n\nenum Status {\n  All = 'all',\n  Completed = 'completed',\n  Active = 'active',\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  onSelectUserId,\n  selectedUserId,\n}) => {\n  const [query, setQuery] = useState('');\n  const [todosStatus, setTodosStatus] = useState('');\n\n  const filterByTitle = () => {\n    return todos.filter(todo => (\n      todo.title.toLowerCase().includes(query.toLowerCase())\n    ));\n  };\n\n  const preparingTodos = () => {\n    const filteredByTitle = filterByTitle();\n\n    if (todosStatus === Status.Completed) {\n      return filteredByTitle.filter(todo => todo.completed);\n    }\n\n    if (todosStatus === Status.Active) {\n      return filteredByTitle.filter(todo => !todo.completed);\n    }\n\n    return filteredByTitle;\n  };\n\n  const visibleTodos = preparingTodos();\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__list-container\">\n\n        <label>\n          Filter by title:\n          {' '}\n          <input\n            data-cy=\"filterByTitle\"\n            type=\"text\"\n            value={query}\n            onChange={(event => setQuery(event.target.value))}\n          />\n        </label>\n\n        <select\n          className=\"TodoList__select\"\n          onChange={(event) => {\n            setTodosStatus(event.target.value);\n          }}\n        >\n          <option value={Status.All}>\n            All\n          </option>\n          <option value={Status.Active}>\n            Active\n          </option>\n          <option value={Status.Completed}>\n            Completed\n          </option>\n        </select>\n\n        <ul\n          className=\"TodoList__list\"\n          data-cy=\"listOfTodos\"\n        >\n          {visibleTodos.map(todo => (\n            <li\n              key={todo.id}\n              className={classNames(\n                'TodoList__item',\n                { 'TodoList__item--checked': todo.completed },\n                { 'TodoList__item--unchecked': !todo.completed },\n              )}\n            >\n              <label>\n                <input type=\"checkbox\" checked readOnly />\n                <p>{todo.title}</p>\n              </label>\n\n              {todo.userId && (\n                <button\n                  data-cy=\"userButton\"\n                  className={classNames('TodoList__user-button button', {\n                    'TodoList__user-button--selected':\n                      todo.userId === selectedUserId,\n                  })}\n                  type=\"button\"\n                  onClick={() => onSelectUserId(todo.userId)}\n                >\n                  {`User ${todo.userId}`}\n                </button>\n              )}\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\nexport async function getTodos(): Promise<Todo[]> {\n  const response = await fetch(`${BASE_URL}/todos`);\n\n  return response.json();\n}\n\nexport async function getUser(userId: number): Promise<User> {\n  const response = await fetch(`${BASE_URL}/users/${userId}`);\n\n  return response.json();\n}\n","import React, { useEffect, useState } from 'react';\nimport './CurrentUser.scss';\n\nimport { getUser } from '../../api/api';\n\ntype Props = {\n  userId: number,\n  clearUser: (userId: number) => void,\n};\n\nexport const CurrentUser: React.FC<Props> = ({\n  userId,\n  clearUser,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getUser(userId)\n      .then(data => setUser(data));\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>\n          Selected user:\n          {' '}\n          {user?.id}\n        </span>\n      </h2>\n\n      <h3\n        data-cy=\"userName\"\n        className=\"CurrentUser__name\"\n      >\n        {user?.name}\n      </h3>\n\n      <p className=\"CurrentUser__email\">\n        {user?.email}\n      </p>\n\n      <p className=\"CurrentUser__phone\">\n        {user?.phone}\n      </p>\n\n      <button\n        type=\"button\"\n        className=\"button CurrentUser__clear\"\n        onClick={() => clearUser(0)}\n      >\n        Clear User\n      </button>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  useEffect(() => {\n    getTodos()\n      .then(data => setTodos(data));\n  });\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        {todos ? (\n          <TodoList\n            todos={todos}\n            selectedUserId={selectedUserId}\n            onSelectUserId={setSelectedUserId}\n          />\n        ) : (\n          <p>Loading...</p>\n        )}\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              clearUser={setSelectedUserId}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}